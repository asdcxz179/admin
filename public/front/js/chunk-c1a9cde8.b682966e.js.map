{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.set.js","webpack:///../../../src/components/VTreeview/VTreeviewNode.ts","webpack:///../../../../src/components/VTreeview/util/filterTreeItems.ts","webpack:///../../../src/components/VTreeview/VTreeview.ts"],"names":["collection","collectionStrong","module","exports","init","this","arguments","length","undefined","baseMixins","mixins","VTreeviewNodeProps","activatable","activeClass","type","default","color","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","selectionType","validator","v","includes","VTreeviewNode","name","inject","treeview","props","level","item","parentIsDisabled","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","computed","disabled","key","children","text","scopedProps","leaf","selected","indeterminate","active","open","computedIcon","hasChildren","created","beforeDestroy","methods","checkChildren","Promise","resolve","genLabel","$scopedSlots","label","$createElement","slot","staticClass","genPrependSlot","prepend","genAppendSlot","append","genContent","genToggle","VIcon","class","on","click","e","genCheckbox","genLevel","genNode","setTextColor","genChild","scopedSlots","genChildrenWrapper","map","c","genTransition","render","h","isExcluded","attrs","String","search","filter","match","i","filterTreeItems","excluded","provide","dense","hoverable","items","multipleActive","openAll","returnObject","value","activeCache","nodes","openCache","selectedCache","Set","excludedItems","watch","handler","oldKeys","Object","k","newKeys","getKeys","diff","oldSelectedCache","emitSelected","deep","getValue","mounted","$slots","console","updateAll","keys","buildTree","parent","oldNode","hasOwnProperty","vnode","node","calculateState","add","state","counts","Boolean","emitOpen","emitActive","emitNodeCache","handleNodeCacheWatcher","old","updateFn","emitFn","getDescendants","descendants","getParents","parents","register","unregister","isParent","updateActive","delete","updateSelected","isForced","changed","descendant","calculated","updateOpen","updateVnodeState","has","themeClasses"],"mappings":"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","file":"js/chunk-c1a9cde8.b682966e.js","sourcesContent":["'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Set` constructor\n// https://tc39.github.io/ecma262/#sec-set-objects\nmodule.exports = collection('Set', function (init) {\n  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, PropType } from 'vue'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    },\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (this.parentIsDisabled && this.selectionType === 'leaf')\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      return getObjectValueByPath(this.item, this.itemChildren)\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode (): VNode {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean): VNode {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper (): any {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key),\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n","import { getObjectValueByPath } from '../../../util/helpers'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\nexport function filterTreeItem (item: object, search: string, textKey: string): boolean {\n  const text = getObjectValueByPath(item, textKey)\n\n  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1\n}\n\nexport function filterTreeItems (\n  filter: TreeviewItemFunction,\n  item: any,\n  search: string,\n  idKey: string,\n  textKey: string,\n  childrenKey: string,\n  excluded: Set<string | number>\n): boolean {\n  if (filter(item, search, textKey)) {\n    return true\n  }\n\n  const children = getObjectValueByPath(item, childrenKey)\n\n  if (children) {\n    let match = false\n    for (let i = 0; i < children.length; i++) {\n      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {\n        match = true\n      }\n    }\n\n    if (match) return true\n  }\n\n  excluded.add(getObjectValueByPath(item, idKey))\n\n  return false\n}\n","// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    dense: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array as PropType<any[]>,\n      default: () => ([]),\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren, [])\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length) {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"],"sourceRoot":""}